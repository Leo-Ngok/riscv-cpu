module riscv_alu(
    input wire [31:0] opcode,
    input wire [31:0] in_1,
    input wire [31:0] in_2,
    output reg [31:0] out
);
    parameter  LUI = 32'b????_????_????_????_????_????_?011_0111;
    parameter  BEQ = 32'b????_????_????_????_?000_????_?110_0011;
    parameter   LB = 32'b????_????_????_????_?000_????_?000_0011;
    parameter   SB = 32'b????_????_????_????_?000_????_?010_0011;

    parameter   SW = 32'b????_????_????_????_?010_????_?010_0011;
    parameter ADDI = 32'b????_????_????_????_?000_????_?001_0011;
    parameter ANDI = 32'b????_????_????_????_?111_????_?001_0011;
    parameter  ADD = 32'b????_????_????_????_?000_????_?011_0011;
    
    always_comb begin
        casez (opcode)
             LUI: out <= { opcode[31:12], 12'b0 };
             BEQ: out <= (in_1 == in_2) ? 32'b1 : 32'b0;
             
              //LB: out <= in_1 + { 19'b0, opcode[31], opcode[7], opcode[30:25], opcode[11:8], 1'b0 };
              LB: out <= in_1 + { 20'b0, opcode[31:20] };
              SB: out <= in_1 + { 20'b0, opcode[31:25], opcode[11:7] };
              SW: out <= in_1 + { 20'b0, opcode[31:25], opcode[11:7] };
            ADDI: out <= in_1 + { 20'b0, opcode[31:20] };
            ANDI: out <= in_1 & { 20'b0, opcode[31:20] };
             ADD: out <= in_1 + in_2;
            default: out <= 32'b0;
        endcase
    end
endmodule
